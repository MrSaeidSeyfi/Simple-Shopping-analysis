# -*- coding: utf-8 -*-
"""Shopping.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fC9seViFQbs-yIi46Uodb6TcMFlbcjjE

Load data from csv file
"""

import pandas as pdimport
import seaborn as sb 
from sklearn.linear_model import LogisticRegression
data = pdimport.read_csv('/content/DataCsv.txt')
y = data.iloc[:,[12]]
X = data.iloc[:,[2,3,4,11]]
data.info

"""Checking independence between features"""

import seaborn as sb 
sb.regplot(x='Age',y='Purchase',data=data,scatter=True)

import scipy 
from scipy.stats import spearmanr

Age=data['Age']
Purchase=data['Purchase']
spearmanr_coefficient, p_value= spearmanr(Age,Purchase)
print(spearmanr_coefficient)

"""Deploying and valuating our model"""

import sklearn 
from sklearn.preprocessing import scale
from sklearn.linear_model import LogisticRegression
X=scale(data.iloc[:,[3,11]])
y=data.iloc[:,12]
LogReg= LogisticRegression()
LogReg.fit(X,y)
LogReg.score(X,y)

y_pred = LogReg.predict(X)
from sklearn.metrics import classification_report
print(classification_report(y,y_pred))

"""Split Dataset for Training and Testing"""

import sklearn 
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.preprocessing import scale
from sklearn.linear_model import LogisticRegression
X=scale(data.iloc[:,[3,11]])
y=data.iloc[:,12] 
model = LogisticRegression(solver='liblinear', random_state=0).fit(X, y)
model.classes_
##Evaluate the Model
model.predict_proba(X)
model.predict(X)
model.score(X, y)
confusion_matrix(y, model.predict(X))
print(classification_report(y, model.predict(X)))

##Improve the Model
model = LogisticRegression(solver='liblinear', C=10.0, random_state=0).fit(X,y)
model.predict_proba(X) 
model.score(X, y)
confusion_matrix(y, model.predict(X))
print(classification_report(y, model.predict(X)))

import matplotlib.pyplot as plt
import numpy as np
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix
import pandas as pdimport  
data = pdimport.read_csv('/content/DataCsv.txt')
y = data.iloc[:,[7]]
X = data.iloc[:,[2,3,7,11]]
model = LogisticRegression(solver='liblinear', random_state=0)
model.fit(X, y)
z=data.iloc[:,[2,3,7,11]]
z.groupby('Marital_Status').mean()
table=pdimport.crosstab(z.Marital_Status,z.Gender)
table.div(table.sum(1).astype(float), axis=0).plot(kind='bar', stacked=True)
plt.savefig('mariral_vs_pur_stack')

import sklearn as sk
from sklearn.ensemble import RandomForestClassifier
import pandas as pdimport  
data = pdimport.read_csv('/content/DataCsv.txt')
y = data.iloc[:,[2]]
X = data.iloc[:,[2,3,7,11]]

RF = RandomForestClassifier(n_estimators=100,
max_depth=2, random_state=0)
RF.fit(X, y)
RF.predict(X.iloc[460:,:])
round(RF.score(X,y), 4)

import sklearn as sk
from sklearn import svm
import pandas as pd
import os
 
data = pd.read_csv('/content/DataCsv.txt', sep=',')
y = data.iloc[:,[2]]
X = data.iloc[:,[2,3,7,11]]

SVM = svm.LinearSVC()
SVM.fit(X, y)
SVM.predict(X.iloc[460:,:])
round(SVM.score(X,y), 4)

temp=data.iloc[:,[2,3,4.7,11]]
temp.describe()

import pandas as pdimport 
import seaborn as sns
import networkx as nx
import plotly.express as px
import matplotlib.pyplot as plt
from matplotlib import pyplot
from numpy import genfromtxt, zeros
import mlxtend
from pylab import plot, show
from mlxtend.frequent_patterns import apriori
from mlxtend.frequent_patterns import association_rules
data = pdimport.read_csv('https://raw.githubusercontent.com/Jotaherrer/DataAnalysis/master/e_commerce/e_commerce.csv')


# Replace the null features with 0:
data.fillna(0, inplace=True) # Re-check N/A was replaced with 0.

# Group by User ID:
purchases = data.groupby(['User_ID']).sum().reset_index()


purchase_by_age = data.groupby('Age')['Purchase'].count().reset_index()


# Grouping by gender and age
age_and_gender = data.groupby('Age')['Gender'].count().reset_index()
gender = data.groupby('Gender')['Age'].count().reset_index()# Plot distribution
plt.figure(figsize=(12,9))
plt.pie(age_and_gender['Gender'], labels=age_and_gender['Age'],autopct='%d%%', colors=['cyan', 'steelblue','peru','blue','yellowgreen','salmon','#0040FF'])
plt.axis('equal')
plt.title("Age Distribution", fontsize='20')
plt.show()
# Plot gender distributionplt.figure(figsize=(12,9))
plt.pie(gender['Age'], labels=gender['Gender'],autopct='%d%%', colors=['salmon','steelblue'])
plt.axis('equal')
plt.title("Gender Distribution", fontsize='20')
plt.show()

# Group by occupation:
occupation = data.groupby('Occupation')['Purchase'].mean().reset_index()# Plot bar chart with line plot:
sns.set(style="white", rc={"lines.linewidth": 3})
fig, ax1 = plt.subplots(figsize=(12,9))
sns.barplot(x=occupation['Occupation'],y=occupation['Purchase'],color='#004488',ax=ax1)
sns.lineplot(x=occupation['Occupation'],y=occupation['Purchase'],color='salmon',marker="o",ax=ax1)
plt.axis([-1,21,8000,10000])
plt.title('Occupation Bar Chart', fontsize='15')
plt.show()
sns.set()

# Group by product ID
product = data.groupby('Product_ID')['Purchase'].count().reset_index()
product.rename(columns={'Purchase':'Count'},inplace=True)
product_sorted = product.sort_values('Count',ascending=False)# Plot line plot
plt.figure(figsize=(14,8))
plt.plot(product_sorted['Product_ID'][:10], product_sorted['Count'][:10], linestyle='-', color='purple', marker='o')
plt.title("Best-selling Products", fontsize='15')
plt.xlabel('Product ID', fontsize='15')
plt.ylabel('Products Sold', fontsize='15')
plt.show()

import seaborn as sns
import pandas as pdimport 
import matplotlib.pyplot as plt 
from matplotlib import cm
data = pdimport.read_csv('/content/Purchase.txt')
 
feature_names = ['Purchase']
X = data[feature_names]
y = data['Purchase']
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)
from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)
from sklearn.linear_model import LogisticRegression
logreg = LogisticRegression()
logreg.fit(X_train, y_train)
print('Accuracy of Logistic regression classifier on training set: {:.2f}'
     .format(logreg.score(X_train, y_train)))
print('Accuracy of Logistic regression classifier on test set: {:.2f}'
     .format(logreg.score(X_test, y_test)))

from sklearn.tree import DecisionTreeClassifier
clf = DecisionTreeClassifier().fit(X_train, y_train)
print('Accuracy of Decision Tree classifier on training set: {:.2f}'
     .format(clf.score(X_train, y_train)))
print('Accuracy of Decision Tree classifier on test set: {:.2f}'
     .format(clf.score(X_test, y_test)))